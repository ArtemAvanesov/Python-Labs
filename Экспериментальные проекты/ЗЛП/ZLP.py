import scipy
import numpy as np
from scipy.optimize import linprog # загрузка библиотеки линейного программирования

# Задача: компания производит 5 видов продукции, цены на продукцию соответственно 25р, 35р, 25р, 40р, 30р.
# На складе имеются запасы необходимых для производства ресурсов 4 типов
# в количестве 700, 250, 600 и 400 единиц соответственно.
# Для производства продукции первого вида требуется: 1ед. первого ресурса, 5ед. - 2-го, 3ед. - 3-го, 4ед. - 4-го.
# Для производства продукции второго вида требуется: 2ед. первого ресурса, 4ед. - 2-го, 4ед. - 3-го, 2ед. - 4-го.
# Для производства продукции третьего вида требуется: 3ед. первого ресурса, 3ед. - 2-го, 2ед. - 3-го, 5ед. - 4-го.
# Для производства продукции четвертого вида требуется: 2ед. первого ресурса, 2ед. - 2-го, 5ед. - 3-го, 3ед. - 4-го.
# Для производства продукции пятого вида требуется: 4ед. первого ресурса, 1ед. - 2-го, 3ед. - 3-го, 1ед. - 4-го.
# Необходимо определить количество каждого вида продукции, производя которую компанию получит максимальную прибыль

# Метод внутренней точки
task = 'max'
#task = 'min'

coeffs = [25,35,25,40,30] # Список коэффициентов целевой функции: f(x) = 25*x1 + 35*x2 + 25*x3 + 40*x4 + 30*x5
# Особенности библиотеки: при поиске максимума коэффициенты записываются с противоположным знаком,
# При поиске минимума коэффициенты пишутся также как в функции
if(task == 'max'):
    coeffs = [i*-1 for i in coeffs]
resourses = [700,250,600,400] # Список объёмов ресурсов: 700 - первого ресурса, 250 - второго, 600 - третьего, 400 - четвертого
res_using = [[1,2,3,2,4], # Матрица удельных значений ресурсов (расход ресурса вида i на производство единицы изделия вида j)
             [5,4,3,2,1],
             [3,4,2,5,3],
             [4,2,5,3,1]] 
solution=linprog(coeffs, res_using, resourses) # Поиск решения

# Вывод решения
print("Оптимальное решение, х = ", np.around(solution.get('x'),  decimals=0))

# Оптимальное значение функции
if (task == 'max'):
    print("Max значение функции при оптимальном решении: ", -np.sum(coeffs*np.around(solution.get('x'),  decimals=0)))
elif (task == 'min'):
    print("Min значение функции при оптимальном решении: ", np.around(solution.get('fun'),  decimals=0))

# Вывод использованных ресурсов
print("Использованные ресурсы: ", np.around(resourses-solution.get('slack'),  decimals=0))

# Вывод остатков ресурсов
print("Остатки ресурсов: ", np.around(solution.get('slack'),  decimals=0))

# Вывод числа итераций
print("Число иттераций: ", solution.get('nit'))

# Вывод статуса решения
if (solution.get('status') == 0):
    print("Поиск оптимального решения завершился успешно!")
elif (solution.get('status') == 1):
    print("Достигнут лимит на число итераций!")
elif (solution.get('status') == 2):
    print("Задача не имеет решений!")
else:
    print("Целевая функция не ограничена!")